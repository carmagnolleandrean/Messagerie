// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modèle utilisateur
model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  avatarUrl     String?
  status        String    @default("offline")
  lastSeen      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  
  // Relations
  sentMessages        Message[]             @relation("SentMessages")
  participations      Participation[]
  contactsInitiated   Contact[]             @relation("UserContacts")
  contactsReceived    Contact[]             @relation("ContactUser")
  sessions            Session[]

  @@map("users")
}

// Modèle conversation
model Conversation {
  id        String    @id @default(uuid())
  name      String?
  isGroup   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  
  // Relations
  messages        Message[]
  participants    Participation[]

  @@map("conversations")
}

// Modèle participation (relation many-to-many entre utilisateurs et conversations)
model Participation {
  conversationId  String
  userId          String
  joinedAt        DateTime  @default(now())
  
  // Relations
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
  @@map("conversation_participants")
}

// Modèle message
model Message {
  id              String      @id @default(uuid())
  conversationId  String
  senderId        String
  content         String
  isRead          Boolean     @default(false)
  isEncrypted     Boolean     @default(true)
  createdAt       DateTime    @default(now())
  
  // Relations
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender          User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Modèle contact
model Contact {
  userId      String
  contactId   String
  status      String    @default("pending") // pending, accepted, blocked
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contact     User      @relation("ContactUser", fields: [contactId], references: [id], onDelete: Cascade)

  @@id([userId, contactId])
  @@map("contacts")
}

// Modèle session
model Session {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
